#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define TOTAL_TERRITORIOS 5

// Estrutura do territ√≥rio
typedef struct {
    char nome[30];
    char corExercito[20];
    int tropas;
} Territorio;

// Exibe o estado atual do mapa
void exibirMapa(Territorio *mapa) {
    printf("\nüó∫Ô∏è Estado Atual do Mapa:\n");
    printf("%-3s %-25s %-20s %-10s\n", "ID", "Territ√≥rio", "Cor do Ex√©rcito", "Tropas");
    for (int i = 0; i < TOTAL_TERRITORIOS; i++) {
        printf("%-3d %-25s %-20s %-10d\n",
               i + 1,
               mapa[i].nome,
               mapa[i].corExercito,
               mapa[i].tropas);
    }
}

// Simula uma batalha entre dois territ√≥rios
void simularBatalha(Territorio *atacante, Territorio *defensor) {
    int dadoAtaque = rand() % 6 + 1;
    int dadoDefesa = rand() % 6 + 1;

    printf("\nüé≤ Dados sorteados:\n");
    printf("Atacante (%s): %d\n", atacante->nome, dadoAtaque);
    printf("Defensor (%s): %d\n", defensor->nome, dadoDefesa);

    if (dadoAtaque >= dadoDefesa) {
        defensor->tropas--;
        printf("‚öîÔ∏è O atacante venceu a rodada!\n");

        if (defensor->tropas <= 0) {
            printf("üè≥Ô∏è O territ√≥rio %s foi conquistado!\n", defensor->nome);
            strcpy(defensor->corExercito, atacante->corExercito);
            defensor->tropas = 1;
            atacante->tropas--;
        }
    } else {
        atacante->tropas--;
        printf("üõ°Ô∏è O defensor resistiu ao ataque!\n");
    }
}

int main() {
    Territorio *mapa = (Territorio*)calloc(TOTAL_TERRITORIOS, sizeof(Territorio));
    int atacante, defensor;

    srand(time(NULL));

    printf("üåç Cadastro de Territ√≥rios - WAR Aventureiro\n");

    for (int i = 0; i < TOTAL_TERRITORIOS; i++) {
        printf("\nüîπ Territ√≥rio %d:\n", i + 1);

        printf("Nome do territ√≥rio: ");
        fgets(mapa[i].nome, sizeof(mapa[i].nome), stdin);
        mapa[i].nome[strcspn(mapa[i].nome, "\n")] = '\0';

        printf("Cor do ex√©rcito dominante: ");
        fgets(mapa[i].corExercito, sizeof(mapa[i].corExercito), stdin);
        mapa[i].corExercito[strcspn(mapa[i].corExercito, "\n")] = '\0';

        printf("N√∫mero de tropas: ");
        scanf("%d", &mapa[i].tropas);
        getchar();
    }

    // Loop de batalhas
    char continuar = 's';
    while (continuar == 's') {
        exibirMapa(mapa);

        printf("\n‚öîÔ∏è Escolha os territ√≥rios para a batalha:\n");
        printf("N√∫mero do territ√≥rio atacante (1 a 5): ");
        scanf("%d", &atacante);
        printf("N√∫mero do territ√≥rio defensor (1 a 5): ");
        scanf("%d", &defensor);
        getchar();

        if (atacante < 1 || atacante > 5 || defensor < 1 || defensor > 5 || atacante == defensor) {
            printf("‚ö†Ô∏è Escolha inv√°lida. Tente novamente.\n");
        } else if (mapa[atacante - 1].tropas <= 1) {
            printf("‚ö†Ô∏è O atacante precisa ter mais de 1 tropa para atacar.\n");
        } else {
            simularBatalha(&mapa[atacante - 1], &mapa[defensor - 1]);
        }

        printf("\nDeseja realizar outra batalha? (s/n): ");
        scanf(" %c", &continuar);
        getchar();
    }

    free(mapa);
    printf("üëã Encerrando o jogo...\n");
    return 0;
}
